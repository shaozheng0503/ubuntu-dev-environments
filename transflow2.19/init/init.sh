#!/bin/bash
# =============================================================================
# TensorFlow 2.19 开发环境容器初始化脚本
# =============================================================================
# 功能说明：
# 1. 配置 SSH 用户密码
# 2. 设置 VSCode Server 配置（无密码访问）
# 3. 配置 JupyterLab 服务（无密码访问）
# 4. 部署 VSCode 用户设置文件
# 
# 执行时机：容器启动时自动执行
# 依赖环境：需要 SSH_PASSWORD 环境变量
# =============================================================================

# 设置错误处理：遇到任何错误立即退出脚本
# 这确保了容器启动失败时能够及时发现并停止
set -e

# =============================================================================
# 1. SSH 用户密码配置
# =============================================================================
# 使用环境变量 SSH_PASSWORD 设置 root 用户的登录密码
# 默认密码为 123456，可通过 Docker 构建参数 --build-arg 自定义
# chpasswd 命令用于批量修改用户密码
echo "root:${SSH_PASSWORD}" | chpasswd

# =============================================================================
# 2. VSCode Server 配置文件生成
# =============================================================================
# 创建 VSCode Server 配置目录
CONFIG_DIR="/root/.config/code-server"
CONFIG_FILE="${CONFIG_DIR}/config.yaml"
mkdir -p "${CONFIG_DIR}"

echo "生成 code-server 配置文件..."

# 生成 VSCode Server 的主配置文件
# 使用 here document 语法创建配置文件
cat <<EOF > "${CONFIG_FILE}"
# 网络绑定配置：监听所有网络接口的 62661 端口
# 0.0.0.0 表示接受来自任何 IP 地址的连接
bind-addr: 0.0.0.0:62661

# 身份验证配置：禁用身份验证，允许无密码访问
# 适合开发环境，生产环境建议启用认证
auth: none

# HTTPS 证书配置：禁用 HTTPS 证书验证
# 开发环境使用 HTTP，生产环境建议启用 HTTPS
cert: false
EOF

# =============================================================================
# 3. JupyterLab 服务配置
# =============================================================================
# 创建 Jupyter 配置目录
mkdir -p /root/.jupyter

# 生成 Jupyter Server 配置文件
# 配置为无密码访问模式，适合开发环境使用
cat <<EOF > /root/.jupyter/jupyter_server_config.py
# 清空密码设置，允许无密码访问 JupyterLab
# 生产环境建议设置强密码
c.ServerApp.password = u''

# 清空访问令牌，禁用令牌认证
# 与密码设置配合，实现无认证访问
c.ServerApp.token = ''

# 跨域访问配置：允许所有来源的跨域请求
# 开发环境需要，生产环境建议限制具体域名
c.ServerApp.allow_origin = '*'

# 禁用 XSRF（跨站请求伪造）检查
# 开发环境简化配置，生产环境建议启用
c.ServerApp.disable_check_xsrf = True

# 终端配置：设置终端使用 bash shell
# 确保终端功能正常工作
c.ServerApp.terminado_settings = {'shell_command': ['/bin/bash']}
EOF

# =============================================================================
# 4. VSCode 用户设置文件部署
# =============================================================================
# 创建 VSCode Server 用户设置目录
mkdir -p /root/.local/share/code-server/User

# 将预配置的 settings.json 文件移动到正确位置
# 该文件包含 Python 解释器路径、文件关联等配置
mv /tmp/settings.json /root/.local/share/code-server/User/settings.json

# =============================================================================
# 脚本执行完成
# =============================================================================
# 注意：此脚本执行完毕后，容器会继续启动 Supervisord
# Supervisord 将负责启动和管理所有服务进程
