FROM ubuntu:22.04

# 更换 apt 源为国内镜像(http)以解决证书问题
RUN sed -i 's@http://.*.ubuntu.com@http://mirrors.tuna.tsinghua.edu.cn@g' /etc/apt/sources.list

# 设置 DEBIAN_FRONTEND 为非交互模式，避免 apt-get 在构建时卡住
ENV DEBIAN_FRONTEND=noninteractive

# 增加 apt 网络超时配置，提高下载稳定性
RUN echo 'Acquire::http::Timeout "120";' > /etc/apt/apt.conf.d/99timeout && \
    echo 'Acquire::ftp::Timeout "120";' >> /etc/apt/apt.conf.d/99timeout

# 安装 CUDA 安装所需的依赖
RUN apt-get update && apt-get install -y --no-install-recommends \
    gnupg2 \
    wget \
    ca-certificates \
    && rm -rf /var/lib/apt/lists/*

# 安装 CUDA Toolkit 11.8
RUN wget https://developer.download.nvidia.com/compute/cuda/repos/ubuntu2204/x86_64/cuda-keyring_1.0-1_all.deb && \
    dpkg -i cuda-keyring_1.0-1_all.deb && \
    apt-get update && \
    apt-get -y install cuda-toolkit-11-8 && \
    rm cuda-keyring_1.0-1_all.deb && \
    rm -rf /var/lib/apt/lists/*

# 设置 CUDA 环境变量
ENV PATH=/usr/local/cuda-11.8/bin:${PATH}
ENV LD_LIBRARY_PATH=/usr/local/cuda-11.8/lib64:${LD_LIBRARY_PATH}

# 安装并配置 Miniconda
RUN wget -q https://repo.anaconda.com/miniconda/Miniconda3-latest-Linux-x86_64.sh && \
    bash Miniconda3-latest-Linux-x86_64.sh -b -p /opt/miniconda3 && \
    rm Miniconda3-latest-Linux-x86_64.sh && \
    echo "PATH=/opt/miniconda3/bin:\$PATH" >> /etc/profile && \
    /opt/miniconda3/bin/conda init bash && \
    /opt/miniconda3/bin/conda config --add channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/free/ && \
    /opt/miniconda3/bin/conda config --add channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/main/ && \
    /opt/miniconda3/bin/conda config --add channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud/conda-forge/ && \
    /opt/miniconda3/bin/conda config --add channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud/msys2/ && \
    /opt/miniconda3/bin/conda config --set show_channel_urls yes

# 配置 pip 清华源
# 注意：在 Docker 构建中，用户家目录可能是 /root
RUN mkdir -p /root/.pip && \
    printf "[global]\nindex-url = https://pypi.tuna.tsinghua.edu.cn/simple\ntrusted-host = pypi.tuna.tsinghua.edu.cn\n" > /root/.pip/pip.conf

# 安装python3.9
RUN /opt/miniconda3/bin/conda create -y -n python3.9 python=3.9 
# 更改.bashrc 默认启动python3.9
RUN echo "source /opt/miniconda3/etc/profile.d/conda.sh && conda activate python3.9" >> /root/.bashrc
# 安装 Node.js（JupyterLab 插件构建用）
RUN apt-get update && apt-get install -y --no-install-recommends \
    curl \
    && curl -fsSL https://deb.nodesource.com/setup_20.x | bash - && \
    apt-get install -y nodejs && \
    rm -rf /var/lib/apt/lists/*

# 安装 JupyterLab 4.4.4 到 base 环境
RUN /opt/miniconda3/bin/conda install -y jupyterlab=4.4.4
# 安装 pip 依赖（后端）
RUN /opt/miniconda3/bin/pip install \
    jupyterlab-lsp \
    python-lsp-server[all] \
    ipympl \
    jupyterlab-katex \
    ipykernel

# 安装 JupyterLab 插件（前端）
RUN /opt/miniconda3/bin/jupyter labextension install \
    @jupyterlab/toc \
    @jupyterlab/htmlviewer

# 安装 LaTeX 支持（可选）
RUN apt-get update && apt-get install -y --no-install-recommends \
    texlive-xetex \
    texlive-fonts-recommended \
    texlive-latex-recommended \
    texlive-latex-extra \
    && rm -rf /var/lib/apt/lists/*

# 将构建上下文复制到镜像中，以规避潜在的文件系统问题
WORKDIR /app
COPY . .

# 从镜像内部复制配置文件和脚本
RUN cp -r /app/config/supervisord.conf /etc/supervisord.conf && \
    cp -r /app/init/init.sh /init/init.sh && \
    cp -r /app/config/settings.json /tmp/settings.json && \
    chmod +x /init/init.sh

# 清理并返回根目录
RUN rm -rf /app
WORKDIR /

# 设置环境变量
ARG SSH_PASSWORD=123456
ENV SSH_PASSWORD=${SSH_PASSWORD} \
    CODE_SERVER_PASSWORD=${SSH_PASSWORD} \
    JUPYTER_PASSWORD=${SSH_PASSWORD} \
    PATH=/usr/local/cuda-11.8/bin:$PATH \
    LD_LIBRARY_PATH=/usr/local/cuda-11.8/lib64:$LD_LIBRARY_PATH

# 暴露端口
EXPOSE 22 8081 8888

# 启动命令
CMD ["/init/init.sh"] 